This is based on https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=d81f90ccd0109de9ed78aeeb8d86e2c6d4600690.

The gcc builtins disagree with the glibc-internals on non-canonical bit
patterns. By switching to the gcc builtins, we avoid passing non-canonical bit
patterns to __mppn_extract_long_double thus avoiding a stack based buffer
overflow.

--- a/stdio-common/printf_fp.c
+++ b/stdio-common/printf_fp.c
@@ -330,7 +330,7 @@
 
       /* Check for special values: not a number or infinity.  */
       int res;
-      if (__isnanl (fpnum.ldbl))
+      if (isnanl (fpnum.ldbl))
 	{
 	  is_neg = signbit (fpnum.ldbl);
 	  if (isupper (info->spec))
@@ -344,7 +344,7 @@
 		wspecial = L"nan";
 	      }
 	}
-      else if ((res = __isinfl (fpnum.ldbl)))
+      else if ((res = isinfl (fpnum.ldbl)))
 	{
 	  is_neg = res < 0;
 	  if (isupper (info->spec))
@@ -375,7 +375,7 @@
 
       /* Check for special values: not a number or infinity.  */
       int res;
-      if (__isnan (fpnum.dbl))
+      if (isnan (fpnum.dbl))
 	{
 	  union ieee754_double u = { .d = fpnum.dbl };
 	  is_neg = u.ieee.negative != 0;
@@ -390,7 +390,7 @@
 	      wspecial = L"nan";
 	    }
 	}
-      else if ((res = __isinf (fpnum.dbl)))
+      else if ((res = isinf (fpnum.dbl)))
 	{
 	  is_neg = res < 0;
 	  if (isupper (info->spec))
--- a/stdio-common/printf_fphex.c
+++ b/stdio-common/printf_fphex.c
@@ -165,7 +165,7 @@
       fpnum.ldbl = *(const long double *) args[0];
 
       /* Check for special values: not a number or infinity.  */
-      if (__isnanl (fpnum.ldbl))
+      if (isnanl (fpnum.ldbl))
 	{
 	  if (isupper (info->spec))
 	    {
@@ -180,7 +180,7 @@
 	}
       else
 	{
-	  if (__isinfl (fpnum.ldbl))
+	  if (isinfl (fpnum.ldbl))
 	    {
 	      if (isupper (info->spec))
 		{
@@ -202,7 +202,7 @@
       fpnum.dbl.d = *(const double *) args[0];
 
       /* Check for special values: not a number or infinity.  */
-      if (__isnan (fpnum.dbl.d))
+      if (isnan (fpnum.dbl.d))
 	{
 	  negative = fpnum.dbl.ieee.negative != 0;
 	  if (isupper (info->spec))
@@ -218,7 +218,7 @@
 	}
       else
 	{
-	  int res = __isinf (fpnum.dbl.d);
+	  int res = isinf (fpnum.dbl.d);
 	  if (res)
 	    {
 	      if (isupper (info->spec))
--- a/stdio-common/printf_size.c
+++ b/stdio-common/printf_size.c
@@ -126,13 +126,13 @@
       fpnum.ldbl = *(const long double *) args[0];
 
       /* Check for special values: not a number or infinity.  */
-      if (__isnanl (fpnum.ldbl))
+      if (isnanl (fpnum.ldbl))
 	{
 	  special = "nan";
 	  wspecial = L"nan";
 	  // fpnum_sign = 0;	Already zero
 	}
-      else if ((res = __isinfl (fpnum.ldbl)))
+      else if ((res = isinfl (fpnum.ldbl)))
 	{
 	  fpnum_sign = res;
 	  special = "inf";
@@ -151,13 +151,13 @@
       fpnum.dbl.d = *(const double *) args[0];
 
       /* Check for special values: not a number or infinity.  */
-      if (__isnan (fpnum.dbl.d))
+      if (isnan (fpnum.dbl.d))
 	{
 	  special = "nan";
 	  wspecial = L"nan";
 	  // fpnum_sign = 0;	Already zero
 	}
-      else if ((res = __isinf (fpnum.dbl.d)))
+      else if ((res = isinf (fpnum.dbl.d)))
 	{
 	  fpnum_sign = res;
 	  special = "inf";
